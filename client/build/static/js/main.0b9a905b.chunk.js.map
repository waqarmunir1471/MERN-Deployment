{"version":3,"sources":["components/AllPets.js","components/NewPet.js","components/DetailPet.js","components/UpdatePet.js","App.js","serviceWorker.js","index.js"],"names":["AllPets","useState","pets","setAllPets","useEffect","axios","get","then","res","data","Pets","console","log","className","to","map","Pet","PetName","PetType","_id","NewPet","setPetName","setPetType","PetDesc","setPetDesc","Skill1","setSkill1","Skill2","setSkill2","Skill3","setSkill3","errors","setErrors","onSubmit","e","preventDefault","Axios","post","errorResponse","errorArr","Object","keys","key","push","message","navigate","catch","err","msg","type","onChange","target","value","DetailPet","props","id","onClick","delete","UpdatePet","setLoaded","put","App","state","setState","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.0b9a905b.chunk.js","sourcesContent":["import React, { useState ,useEffect} from 'react';\nimport { Link } from '@reach/router';\nimport axios from'axios';\n\nconst AllPets = ()=>{\n    const [pets,setAllPets] = useState()\n    const fetchAllPets=()=>{\n        axios.get(\"http://localhost:8000/api/allpets\")\n        .then(res=>{\n            setAllPets(res.data.Pets)\n            console.log(res.data.Pets)\n        })\n    }\n    useEffect(()=>{\n       fetchAllPets();\n    },[])\n    \n    return(\n\n        <div className=\"container col-lg-8\">\n            <navbar>\n            <Link to=\"/pet/new\"><button className=\"btn btn-info\"> Add a Pet to the Shelter</button></Link>\n            </navbar>\n            <h1>Pet Shelter</h1>\n            <h3>These Pet are Looking for good home</h3>\n            <table className=\"table table-striped table-bordered\">\n                <thead className=\"thead thead-dark\">\n                    <th>Name</th>\n                    <th>Type</th>\n                    <th>Action</th>\n                </thead>\n                <tbody>\n                { pets ? pets.map(Pet=>(\n                        <tr>\n                    <td>{Pet.PetName}</td>\n                        <td>{Pet.PetType}</td>\n                        <td>\n                            <Link to={\"/details/\"+Pet._id}><button className=\"btn btn-info\">Details</button></Link>\n                            <Link to={\"/update/\"+Pet._id}><button className=\"btn btn-warning\">Edit</button></Link>\n                        </td>\n                    </tr>\n                    )):null}\n                   \n                </tbody>\n            </table>\n        </div>\n    )\n}\nexport default AllPets;","import React, { useState } from 'react';\nimport { Link,navigate } from '@reach/router';\nimport Axios from 'axios';\n\nconst NewPet = () =>{\n    const [PetName, setPetName] = useState();\n    const [PetType, setPetType] = useState();\n    const [PetDesc, setPetDesc] = useState();\n    const [Skill1, setSkill1] = useState();\n    const [Skill2, setSkill2] = useState();\n    const [Skill3, setSkill3] = useState();\n    const [errors, setErrors] = useState();\n    const onSubmitHandler =e=>{\n        e.preventDefault();\n        Axios.post(\"http://localhost:8000/api/pet/new\",{\n            PetName,\n            PetType,\n            PetDesc,\n            Skill1,\n            Skill2,\n            Skill3\n        })\n        .then(res=>{\n            if(res.data.errors){\n                const errorResponse = res.data.errors; // Get the errors from err.response.data\n                const errorArr = []; // Define a temp error array to push the messages in\n                for (const key of Object.keys(errorResponse)) { // Loop through all errors and get the messages\n                    errorArr.push(errorResponse[key].message)\n                }\n                // Set Errors\n                setErrors(errorArr);\n                console.log(errorArr);\n                console.log(res.data.errors);\n            }else{\n                navigate(\"/\")\n            }\n        })\n        .catch(err=>(console.log(err)))\n    }\n    return(\n        <div className=\"container col-lg-10\">\n            <h1>Pet Shelter</h1>\n            <h3>Know a Pet Needing Home?</h3>\n            <form onSubmit={onSubmitHandler} className=\"form-group col-lg-6\">\n            {errors != null ? errors.map(msg=>(<p className=\"alert alert-danger\">{msg}</p>)):null}\n                    <p>\n                        <label>Pet Name : </label>\n                        <input type=\"text\" className=\"form-control\" onChange={(e)=>setPetName(e.target.value)}/>\n                    </p>\n                    <p>\n                        <label>Pet Type : </label>\n                        <input type=\"text\" className=\"form-control\" onChange={(e)=>setPetType(e.target.value)}/>\n                    </p>\n                    <p>\n                        <label>Pet Description : </label>\n                        <input type=\"text\" className=\"form-control\" onChange={(e)=>setPetDesc(e.target.value)}/>\n                    </p>\n                    <p>\n                        <label>Skill 1 :(Optional) </label>\n                        <input type=\"text\" className=\"form-control\" onChange={(e)=>setSkill1(e.target.value)}/>\n                    </p>\n                    <p>\n                        <label>Skill 2 :(Optional) </label>\n                        <input type=\"text\" className=\"form-control\" onChange={(e)=>setSkill2(e.target.value)}/>\n                    </p>\n                    <p>\n                        <label>Skill 3 :(Optional) </label>\n                        <input type=\"text\" className=\"form-control\" onChange={(e)=>setSkill3(e.target.value)}/>\n                    </p>\n                    <p>\n                        <input type=\"submit\" className=\"btn btn-success\" onChange=\"Add a Pet\"/>\n                    </p>\n            </form> \n            <Link to=\"/\"><button className=\"btn btn-primary\">Go Back</button></Link>\n\n        </div>\n    )\n}\nexport default NewPet;","import React, { useEffect,useState } from 'react';\nimport {Link, navigate} from '@reach/router';\nimport Axios from 'axios';\nconst DetailPet = (props) =>{\n    const [PetName, setPetName] = useState('');\n    const [PetType, setPetType] = useState(\"\");\n    const [PetDesc, setPetDesc] = useState(\"\");\n    const [Skill1, setSkill1] = useState(\"\");\n    const [Skill2, setSkill2] = useState(\"\");\n    const [Skill3, setSkill3] = useState(\"\");\n    useEffect(()=>{\n        Axios.get(\"http://localhost:8000/api/details/\"+ props.id)\n        .then(res=>{\n            setPetName(res.data.PetName)\n            setPetType(res.data.PetType)\n            setPetDesc(res.data.PetDesc)\n            setSkill1(res.data.Skill1)\n            setSkill2(res.data.Skill2)\n            setSkill3(res.data.Skill3)\n        })\n\n    },[])\n    const delPet=e=>{\n        Axios.delete(\"http://localhost:8000/api/delpet/\"+props.id)\n        .then(res=>{console.log(res.data)\n            navigate(\"/\")\n        })\n    }\n    return (\n        <div className=\"container col-lg-10\">\n            <h1>Pet Shelter</h1>\n            <h1>Details about : {PetName}</h1>\n            <Link to=\"/\"><button className=\"btn btn-primary\">Back to Home</button></Link>\n\n            <Link to={\"/delpet/\"+ props.id}><button onClick={delPet}className=\"btn btn-danger\">Adapt {PetName}</button></Link>\n            <table className=\"table table-striped table-bordered col-lg-8\">\n                <thead>\n                    <th>Pet Type</th>\n                    <th>Pet Description</th>\n                    <th>Skills</th>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>{PetType}</td>\n                        <td>{PetDesc}</td>\n                        <td>\n                            <ul>\n                                <li>{Skill1}</li>\n                                <li>{Skill2}</li>\n                                <li>{Skill3}</li>\n                            </ul>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    )\n}\nexport default DetailPet;","import React,{useState,useEffect} from 'react';\nimport Axios from 'axios';\nimport {Link,navigate} from '@reach/router';\n\nconst UpdatePet = (props)=>{\n    const [PetName, setPetName] = useState(\"\");\n    const [PetType, setPetType] = useState(\"\");\n    const [PetDesc, setPetDesc] = useState(\"\");\n    const [Skill1, setSkill1] = useState(\"\");\n    const [Skill2, setSkill2] = useState(\"\");\n    const [Skill3, setSkill3] = useState(\"\");\n    const [errors, setErrors] = useState();\n    const [loaded, setLoaded] = useState( false)\n\n    useEffect(() => {\n        Axios.get(\"http://localhost:8000/api/details/\" + props.id)\n            .then(res => {\n                setPetName(res.data.PetName)\n                setPetType(res.data.PetType)\n                setPetDesc(res.data.PetDesc)\n                setSkill1(res.data.Skill1)\n                setSkill2(res.data.Skill2)\n                setSkill3(res.data.setSkill3)\n            setLoaded(true);\n\n            console.log(res.data.errors)\n            // setLoaded(true);\n        })},[])\n    const onSubmitHandler =e=>{\n        e.preventDefault();\n        Axios.put(\"http://localhost:8000/api/update/\"+props.id,{\n            PetName,\n            PetDesc,\n            PetType,\n            Skill1,\n            Skill2,\n            Skill3\n        })\n        .then(res=>{\n            if(res.data.errors){\n                const errorResponse = res.data.errors; // Get the errors from err.response.data\n                const errorArr = []; // Define a temp error array to push the messages in\n                for (const key of Object.keys(errorResponse)) { // Loop through all errors and get the messages\n                    errorArr.push(errorResponse[key].message)\n                }\n                // Set Errors\n                setErrors(errorArr);\n                console.log(errorArr);\n                console.log(res.data.errors);\n            }else{\n                navigate(\"/\")\n            }\n        })\n    }\n    return(\n        \n        <div className=\"container col-lg-8\">\n\n            <h1>Pet Shelter </h1>\n            <h3>Edit {PetName} </h3>\n            <form onSubmit={onSubmitHandler} className=\"form-group col-lg-6\">\n            {errors != null ? errors.map(msg=>(<p className=\"alert alert-danger\">{msg}</p>)):null}\n\n                    <p>\n                        <label>Pet Name : </label>\n                        <input type=\"text\" className=\"form-control\"  value={PetName} onChange={(e)=>setPetName(e.target.value)}/>\n                    </p>\n                    <p>\n                        <label>Pet Type : </label>\n                        <input type=\"text\" className=\"form-control\" value={PetType} onChange={(e)=>setPetType(e.target.value)}/>\n                    </p>\n                    <p>\n                        <label>Pet Description : </label>\n                        <input type=\"text\" className=\"form-control\" value={PetDesc} onChange={(e)=>setPetDesc(e.target.value)}/>\n                    </p>\n                    <p>\n                        <label>Skill 1 :(Optional) </label>\n                        <input type=\"text\" className=\"form-control\" value={Skill1}onChange={(e)=>setSkill1(e.target.value)}/>\n                    </p>\n                    <p>\n                        <label>Skill 2 :(Optional) </label>\n                        <input type=\"text\" className=\"form-control\" value={Skill2} onChange={(e)=>setSkill2(e.target.value)}/>\n                    </p>\n                    <p>\n                        <label>Skill 3 :(Optional) </label>\n                        <input type=\"text\" className=\"form-control\"value={Skill3} onChange={(e)=>setSkill3(e.target.value)}/>\n                    </p>\n                    <p>\n                        <input type=\"submit\" className=\"btn btn-success\" onChange=\"Add a Pet\"/>\n                    </p>\n            </form>\n            <Link to=\"/\"><button className=\"btn btn-primary\">Go Back</button></Link>\n        </div>\n    )\n}\n\nexport default UpdatePet;","import React,{useState} from 'react';\n// import logo from './logo.svg';\n// import './App.css';\nimport {Router} from '@reach/router';\nimport AllPets from './components/AllPets';\nimport NewPet from './components/NewPet';\nimport DetailPet from './components/DetailPet';\nimport UpdatePet from './components/UpdatePet';\n\n\nfunction App() {\n  const [state,setState] = useState()\n  return (\n    <div className=\"App\">\n      <Router>\n        <AllPets path=\"/\"/>\n        <NewPet path=\"/pet/new\"/>\n        <DetailPet path=\"/details/:id\"/>\n        <UpdatePet state={state} setState={setState} path=\"/update/:id\"/>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}